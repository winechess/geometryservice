import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.apache.tools.ant.filters.ReplaceTokens

group 'com.dit'
version '2.0.0-SNAPSHOT'


buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.8"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
    }
}

repositories {
    mavenCentral()
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

//Перенастраиваем имя jar артефакта
//Documentation: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html

jar.baseName = 'geometryservice'
querydsl.jpa = true
querydsl.querydslSourcesDir = 'build/generated/querydsl'


ext {
    hibernateVersion = '5.2.8.Final'
    queryDslVersion = '4.1.3'
    postgresqlJdbcDriverVersion = '42.0.0'
    dockerBuildDir = new File(project.buildDir, 'docker')
    dockerFilePath = 'docker/Dockerfile'
    dockerImageTag = "${project.group}/${project.jar.baseName}:${project.version}"
}

task copyJarFileToDockerBuildDir(type: Copy, dependsOn: build) {
    from jar
    into project.dockerBuildDir
}

task copyDockerFileToDockerBuildDir(type: Copy, dependsOn: copyJarFileToDockerBuildDir) {
    from project.dockerFilePath
    into project.dockerBuildDir
    filter(ReplaceTokens, tokens: [APPNAME: project.jar.baseName, VERSION: project.version])
}

task buildImage(type: DockerBuildImage, dependsOn: copyDockerFileToDockerBuildDir) {
    inputDir = file("build/docker")
    tag = project.dockerImageTag
}

task createContainer(type: DockerCreateContainer) {
    dependsOn 'removeContainer'
    containerName = project.jar.baseName
    image = project.dockerImageTag
    imageId = project.dockerImageTag
    portBindings = ['8181:8080']
    links = ["mdm.postgres:postgres"]
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { project.jar.baseName }
}

task logContainer(type: DockerLogsContainer) {
    follow = true
    targetContainerId { project.jar.baseName }
}


task stopContainer(type: DockerStopContainer) {
    targetContainerId { project.jar.baseName }
    onError { exception ->
        if (exception.toString() == "com.github.dockerjava.api.exception.NotModifiedException" || exception.message.contains('No such container'))
            logger.quiet("No such container: $project.jar.baseName")
        else throw exception;
    }
}

task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    removeVolumes = false
    force = false
    targetContainerId { project.jar.baseName }
    onError { exception ->
        if (exception.message.contains('No such container')) logger.quiet("No such container: $project.jar.baseName")
        else throw exception
    }
}

task restart(type: DockerRestartContainer) {
    targetContainerId { project.jar.baseName }
}

task rebuild(dependsOn: [buildImage, startContainer, logContainer]){
    startContainer.mustRunAfter buildImage
    logContainer.mustRunAfter startContainer
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter'
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-web"
//    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.hibernate:hibernate-core:${project.hibernateVersion}"
    compile "org.hibernate:hibernate-spatial:${project.hibernateVersion}"
    compile "org.hibernate:hibernate-jpamodelgen:${project.hibernateVersion}"
    compile "org.hibernate:hibernate-entitymanager:${project.hibernateVersion}"
    compile "com.querydsl:querydsl-jpa:${project.queryDslVersion}"
    compile "org.postgresql:postgresql:${project.postgresqlJdbcDriverVersion}"
    compile 'org.apache.commons:commons-lang3:3.3'

    //TEST DEPENDENCIES
    testCompile 'org.springframework.boot:spring-boot-starter-test'
//    testCompile("org.springframework.security:spring-security-test")
    testCompile 'com.jayway.jsonpath:json-path-assert'
    testCompile 'org.apache.httpcomponents:httpclient'

}
